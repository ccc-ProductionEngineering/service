pipeline {
    agent any
    tools {
        jdk 'jdk21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
    }
     environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Tag image') {
            steps {
                script {
                    // GIT_TAG = sh([script: 'git fetch --tag && git tag', returnStdout: true]).trim()
                    // MAJOR_VERSION = sh([script: 'git tag | cut -d . -f 1', returnStdout: true]).trim()
                    // MINOR_VERSION = sh([script: 'git tag | cut -d . -f 2', returnStdout: true]).trim()
                    // PATCH_VERSION = sh([script: 'git tag | cut -d . -f 3', returnStdout: true]).trim()

                    // // Calculezi noua versiune minoră în shell
                    // NEW_MINOR = sh(script: "expr ${MINOR_VERSION} + 1", returnStdout: true).trim()

                    // IMAGE_TAG = "${MAJOR_VERSION}.${NEW_MINOR}.${PATCH_VERSION}"

                    // sh "docker build -t corinaa/hello-img:${IMAGE_TAG} ."
                    // sh "docker login -u corinaa -p Corina2002!"
                    // sh "docker push corinaa/hello-img:${IMAGE_TAG}"
                    sh([script: 'git fetch --tag', returnStdout: true]).trim()
                    env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
                    env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
                    env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
                    env.IMAGE_TAG = "${env.MAJOR_VERSION}.\$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
                    sh "git tag ${env.IMAGE_TAG}"
                    sh "git push https://$GITHUB_TOKEN@github.com/ccc-ProductionEngineering/service.git ${env.IMAGE_TAG}"
                }
            }
        }

         stage('Deploy with Docker Compose') {
            steps {
                sh 'IMAGE_TAG=${IMAGE_TAG} docker compose up -d hello mongo'
            }
        }
    }
}
